{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","wallPaperLink","quoteText","quoteAuthor","time","axios","get","then","res","console","log","data","setState","urls","full","catch","err","num","Math","floor","random","length","text","author","className","style","backgroundImage","this","moment","format","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oRAoEeA,E,4MA9DXC,MAAQ,CACJC,cAAe,0FACfC,UAAW,GACXC,YAAa,GACbC,KAAM,M,kEAGU,IAAD,OACfC,IAAMC,IAAI,qHACLC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChB,EAAKC,SAAS,CACVX,cAAeO,EAAIG,KAAKE,KAAKC,UAGpCC,OAAM,SAAAC,GACHP,QAAQC,IAAIM,MAEpBX,IAAMC,IAAI,+BACLC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,IAAMS,EAAMC,KAAKC,MAAMD,KAAKE,SAASZ,EAAIG,KAAKU,QAC9C,EAAKT,SAAS,CACVV,UAAWM,EAAIG,KAAKM,GAAKK,KACzBnB,YAAaK,EAAIG,KAAKM,GAAKM,YAGlCR,OAAM,SAAAC,GACHP,QAAQC,IAAIM,Q,+BAOpB,OACI,yBAAKQ,UAAU,MAAMC,MAAO,CAACC,gBAAgB,OAAD,OAAQC,KAAK3B,MAAMC,cAAnB,OACxC,yBAAKuB,UAAU,aAEX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACX,wBAAIA,UAAU,SAAd,gBACA,wBAAIA,UAAU,QAAQI,MAASC,OAAO,OACtC,wBAAIL,UAAU,QAAQI,MAASC,OAAO,QAE1C,yBAAKL,UAAU,cAEnB,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YACX,wBAAIA,UAAU,UAAd,oBACA,uBAAGA,UAAU,SAASG,KAAK3B,MAAME,UAAjC,MAA+CyB,KAAK3B,MAAMG,cAE9D,yBAAKqB,UAAU,oB,GAvDrBM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.1840a98e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport moment from 'moment';\n\nclass App extends React.Component {\n    state = {\n        wallPaperLink: 'https://images.unsplash.com/photo-1506744038136-46273834b3fb?ixlib=rb-1.2.1&w=1000&q=80',\n        quoteText: '',\n        quoteAuthor: '',\n        time: null\n    }\n\n    componentDidMount(){\n        axios.get('https://api.unsplash.com/photos/random/?client_id=N6gSTT5QTo0hwGeeZfW1HH59hwp5pBqRx2pH7EXsrLE&&collections=827743')\n            .then(res => {\n                console.log(res.data)\n                this.setState({\n                    wallPaperLink: res.data.urls.full\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        axios.get('https://type.fit/api/quotes')\n            .then(res => {\n                console.log(res)\n                const num = Math.floor(Math.random()*res.data.length);\n                this.setState({\n                    quoteText: res.data[num].text,\n                    quoteAuthor: res.data[num].author\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    \n    }\n\n    render(){\n        \n        return (\n            <div className=\"box\" style={{backgroundImage:`url(${this.state.wallPaperLink})`}}>\n                <div className=\"container\">\n                   \n                    <div className=\"row content\">\n                        <div className=\"col-sm-2\"></div>\n                        <div className=\"col-sm-8\">\n                            <h1 className=\"title\">Good morning</h1>\n                            <h3 className=\"date\">{moment().format('ll')}</h3>\n                            <h3 className=\"time\">{moment().format('LT')}</h3>\n                        </div>\n                        <div className=\"col-sm-2\"></div>\n                    </div>\n                    <div className=\"row qbox\">\n                        <div className=\"col-sm-2\"></div>\n                        <div className=\"col-sm-8\">\n                            <h1 className=\"qtitle\">Quote of the day</h1>\n                            <p className=\"quote\">{this.state.quoteText} - {this.state.quoteAuthor}</p>\n                        </div>\n                        <div className=\"col-sm-2\"></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}